name: Python CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # Specify python versions

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH # Add uv to PATH

    - name: Install dependencies
      run: |
        uv pip install Flask python-dotenv reportlab easyverein pytest pytest-cov mock # Add all your app and test dependencies here
        # If you have a pyproject.toml with dependencies:
        # uv pip install .[test] # Assuming you have a [project.optional-dependencies] group named "test"
        # Or if you have a requirements.txt and requirements-dev.txt:
        # uv pip install -r requirements.txt
        # uv pip install -r requirements-dev.txt

    - name: Create dummy .env for tests
      run: |
        echo "FLASK_SECRET_KEY=test_secret_for_ci" > .env
        echo "ADMIN_USERNAME=ci_admin" >> .env
        echo "ADMIN_PASSWORD=ci_pass" >> .env
        # Add any other .env variables required by your app during tests,
        # e.g., APIKEY if not fully mocked or if initial load_config is hit
        echo "APIKEY=dummy_ci_api_key" >> .env
        echo "REFRESH_TOKEN=dummy_ci_refresh_token" >> .env


    - name: Test with pytest
      run: |
        uv run pytest --cov=main --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      if: success() && matrix.python-version == '3.10' # Optional: Upload only for one Python version
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Optional: if you use Codecov private repo
        files: ./coverage.xml # report-specific path
        # fail_ci_if_error: true # Optional: uncomment to fail CI if coverage upload fails
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }} # Also pass as env var for some setups
        # It's generally recommended to set CODECOV_TOKEN in GitHub secrets for private repos
        # For public repos, it might not be needed if Codecov auto-detects.
# Action failed with "Required Actions parameters missing: environment_variables"
# Error: Codecov: Missing Property: environment_variables is a required property for this action. This is a new required field. Please supply an object of key value pairs for the environment variables Codecov needs to run.
# This error indicates a change in the codecov action. Let's try with the `env_vars` field.
# According to https://github.com/codecov/codecov-action/issues/1204
# it should be `env_vars` not `environment_variables`
# And it seems to be related to specific versions. The latest version might have fixed this.
# Let's assume v4 handles it or we might need to specify OS, etc.
# For now, I'll keep it simple. If it fails, the user can adjust the Codecov step.
# The error message "Required Actions parameters missing: environment_variables" was from a previous version of the action.
# The current version v4 uses `with: token: ${{ secrets.CODECOV_TOKEN }}` which should be correct.
# The error message might have been from a user's local setup or an older version of the action.
# The `env: CODECOV_TOKEN` is also a common pattern.
# Let's ensure the `files` parameter is correct.
# The error "Codecov: Missing Property: environment_variables" is specific to Codecov's uploader when run directly,
# the GitHub action abstracts this.
# The provided example from codecov/codecov-action v4 itself is:
# - uses: codecov/codecov-action@v4
#   with:
#     token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
#     files: ./coverage.xml,./coverage.json # optional
#     # ... other options
# So the current setup looks reasonable for v4.
# The critical part for CI is `uv run pytest`. Coverage upload is optional.

# Adding a step to create dummy Preis.json and beleg.json if they are not committed
# and are essential for tests to even start (e.g. if client fixture fails without them)
    - name: Create dummy data files if not present
      run: |
        if [ ! -f "Preise.json" ]; then
          echo '[{"name": "TestGerät", "kosten": [1,1,1], "Einheit": "pro Stück", "kategorie": "Test"}]' > Preise.json
          echo "Preise.json created for CI"
        fi
        if [ ! -f "beleg.json" ]; then
          echo '{"header": "CI Beleg", "recipient": {}, "footer": "CI Footer"}' > beleg.json
          echo "beleg.json created for CI"
        fi
